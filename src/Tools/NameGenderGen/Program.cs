using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;

// Generator: parses Data/seznam_jmen.csv and emits NameGenderData.g.cs with FrozenDictionary

static class Program
{
    private enum Gender { Female, Male, Neutral }

    public static int Main(string[] args)
    {
        try
        {
            if (args.Length < 2)
            {
                Console.Error.WriteLine("Usage: NameGenderGen <csvPath> <outCsPath>");
                return 2;
            }
            var csvPath = args[0];
            var outCsPath = args[1];
            var entries = ParseCsv(csvPath);
            var code = EmitCode(entries);
            Directory.CreateDirectory(Path.GetDirectoryName(outCsPath)!);
            File.WriteAllText(outCsPath, code, new UTF8Encoding(encoderShouldEmitUTF8Identifier: true));
            Console.WriteLine($"Generated {outCsPath} with {entries.Count} entries");
            return 0;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            return 1;
        }
    }

    private static Dictionary<string, Gender> ParseCsv(string path)
    {
        // CSV format: DRUH_JMENA,JMENO (uppercase, possibly diacritics)
        // DRUH_JMENA values: ZENA, MUZ, NEUTRALNI
        var map = new Dictionary<string, Gender>(StringComparer.OrdinalIgnoreCase);
        using var reader = new StreamReader(path, Encoding.UTF8, true);
        string? line;
        bool first = true;
        while ((line = reader.ReadLine()) != null)
        {
            if (first) { first = false; continue; }
            if (string.IsNullOrWhiteSpace(line)) continue;
            var idx = line.IndexOf(',');
            if (idx <= 0 || idx >= line.Length - 1) continue;
            var kind = line.AsSpan(0, idx).Trim();
            var name = line.AsSpan(idx + 1).Trim();
            if (name.Length == 0) continue;
            var key = name.ToString();
            Gender gender;
            if (kind.Equals("ZENA", StringComparison.OrdinalIgnoreCase)) gender = Gender.Female;
            else if (kind.Equals("MUZ", StringComparison.OrdinalIgnoreCase)) gender = Gender.Male;
            else if (kind.Equals("NEUTRALNI", StringComparison.OrdinalIgnoreCase)) gender = Gender.Neutral;
            else continue;

            // Normalize: titlecase key for readability in generated code, but case-insensitive lookups used
            map[key] = gender;
        }
        return map;
    }

    private static string Escape(string s)
    {
        return s.Replace("\\", "\\\\").Replace("\"", "\\\"");
    }

    private static string EmitCode(Dictionary<string, Gender> entries)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/> DO NOT EDIT â€“ generated by NameGenderGen");
        sb.AppendLine("using System.Collections.Frozen;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("namespace Morpheus.Data;");
        sb.AppendLine("public static class NameGenderData");
        sb.AppendLine("{");
        sb.AppendLine("    public enum NameGender { Female, Male, Neutral }");
        sb.AppendLine("    public static readonly FrozenDictionary<string, NameGender> Names = Create();");
        sb.AppendLine("    private static FrozenDictionary<string, NameGender> Create()");
        sb.AppendLine("    {");
        sb.AppendLine("        var d = new Dictionary<string, NameGender>(System.StringComparer.OrdinalIgnoreCase)");
        sb.AppendLine("        {");

        foreach (var kv in entries.OrderBy(k => k.Key, StringComparer.OrdinalIgnoreCase))
        {
            var val = kv.Value switch { Gender.Female => "NameGender.Female", Gender.Male => "NameGender.Male", _ => "NameGender.Neutral" };
            sb.Append("            {").Append('"').Append(Escape(kv.Key)).Append('"').Append(", ").Append(val).AppendLine(" },");
        }

        sb.AppendLine("        };");
        sb.AppendLine("        return d.ToFrozenDictionary(System.StringComparer.OrdinalIgnoreCase);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }
}


